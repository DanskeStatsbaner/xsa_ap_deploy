pipeline {

    agent {
        label "linux"
    }
    parameters {
        booleanParam(name: 'TagLatest', defaultValue: false, description: 'Tag this image as latest')
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '30'))
        timestamps()
        disableConcurrentBuilds()
    }
    environment {
        projectName  = "xsa_ap_deploy"
        deployTo = "sit"
        version = "1.0.0.${env.BUILD_NUMBER}"
        suffix = "${env.GIT_COMMIT}-${env.GIT_BRANCH.replace('/', '-')}"
        packageVersion = "${version}-${suffix}"
        jobName = "xsa_ap_deploy"
        artifactoryServerId = "artifactory"
    }

    stages {
        stage ("Stash files") {
            steps {
                stash includes: "Infrastructure/deployment/app-router/*", name: "appRouter", useDefaultExcludes: false
                stash includes: "Infrastructure/deployment/app/*", name: "app", useDefaultExcludes: false
                stash includes: "Infrastructure/deployment/app/framework/*", name: "appFramework", useDefaultExcludes: false
            }
        }

        stage ("Publish Artifacts") {
            agent {
                docker {
                    image "octopusdeploy/octo"
                    args '--entrypoint=\'\''
                }
		    }
                steps {
                unstash "appRouter"
                unstash "app"
                unstash "appFramework"

                sh "rm -rf dataART.${projectName}.${version}"
                fileOperations([
                    folderCopyOperation(
                                sourceFolderPath: "Infrastructure",
                                destinationFolderPath: "$WORKSPACE/dataART.${projectName}.${version}/")])

                sh """ octo pack --id="dataART.${projectName}" --version="${packageVersion}" --basepath="$WORKSPACE/dataART.${projectName}.${version}" --outFolder=$WORKSPACE """

                rtUpload(
                    spec: '''{ "files": [
                        {
                            "pattern": "dataART.${projectName}.${packageVersion}.nupkg",
                            "target": "octopus-dataarten/",
                            "props" : "deployed=true"
                        }
                    ] }''',
                    buildNumber: "${packageVersion}", buildName: "dataART.${projectName}",
                    serverId: "${artifactoryServerId}"
                )
                rtPublishBuildInfo(buildNumber: "${packageVersion}", buildName: "dataART.${projectName}", serverId: "${artifactoryServerId}")
             }
        }
        stage ("Octopus sit") {
            agent {
                docker {
                    image "octopusdeploy/octo"
                    args '--entrypoint=\'\''
                }
		    }
            options { skipDefaultCheckout true }
            environment {
                deployTo = "sit"
                releaseversion = "${version}"
                OCTOPUS_CLI_SERVER = "https://octopus.azure.dsb.dk"
                OCTOPUS_CLI_API_KEY = credentials("Octopus-Api")
                hostargs = "--project ${jobName} --version=${releaseversion} --space=Spaces-3"
            }
            steps {
                addBadge(text: "octopus", icon: "/userContent/octopus_16x16.png", id: "octopus", link: "${octopusURL}/app#/Spaces-3/projects/${jobName}/deployments/releases/${releaseversion}")
                sh """
                    octo create-release  $hostargs --defaultpackageversion=${packageVersion}
                    octo deploy-release $hostargs --deployto=${deployTo} --waitfordeployment --deploymentTimeout=00:20:00
                """
            }
        }

    }
}